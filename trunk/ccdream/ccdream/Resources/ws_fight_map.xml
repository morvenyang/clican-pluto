<?xml version="1.0" encoding="UTF-8"?>
<workflow>
	<!-- 从选择角色开始触发 -->
    <start name="selectRole" nextStates="displayMoveShadowAndPreMoveAction"/>
    
    <!-- 在onStart就产生移动阴影和移动前效果 -->
    <state name="displayMoveShadowAndPreMoveAction" class="DisplayMoveShadowAndPreMoveAction">
        <nextCondStates expr="selectRoleAgain" nextStates="popupOperationWindowAction"/>
        <nextCondStates expr="selectMovePoint" nextStates="moveAction"/>
        <nextCondStates expr="selectNotMovePoint" nextStates="end"/>
    </state>
    
    <!-- 移动效果 -->
    <state name="moveAction" class="MoveAction" nextStates="popupOperationWindowAction">
    </state>
    
    <!-- 弹出操作窗口 -->
    <state name="popupOperationWindowAction" class="PopupOperationWindowAction">
    	<nextCondStates expr="selectStandby" nextStates="standbyAction"/>
    	<nextCondStates expr="selectDismount" nextStates="dismountAction"/>
    	<nextCondStates expr="selectItem" nextStates="itemAction"/>
    	<!-- 在有可攻击目标情况下这个选项才会出现 -->
    	<nextCondStates expr="selectAttack" nextStates="popupWeaponSelectWindowAction"/>
    </state>
    
    <state name="itemAction" class="ItemAction" nextStates="end"/>
    <state name="dismountAction" class="DismountAction" nextStates="displayMoveShadowAndPreMoveAction"/>
    <state name="standbyAction" class="StandbyAction" nextStates="end"/>
	
	<!-- 弹出武器选择框 和现实默认武器属性-->
	<state name="popupWeaponSelectWindowAction" class="PopupWeaponSelectWindowAction">
		<nextCondStates expr="selectCancel" nextStates="popupOperationWindowAction"/>
		<nextCondStates expr="selectWeapon" nextStates="popupWeaponSelectWindowAction"/>
		<nextCondStates expr="selectEnemy" nextStates="displayAttackDefenceAttributeAction"/>
	</state>
	
	<!-- 显示攻防双方属性 -->
	<state name="displayAttackDefenceAttributeAction" class="DisplayAttackDefenceAttributeAction">
		<nextCondStates expr="confirmAttack" nextStates="displayFightAction"/>
	</state>
    
    <!-- 显示战斗画面-->
    <state name="displayFightAction" class="DisplayFightAction">
    	<nextCondStates expr="canReMove" nextStates="displayReMoveShadowAndPreReMoveAction"/>
    	<nextCondStates expr="cannotReMove" nextStates="standbyAction"/>
    </state>
    
    <!-- 再移动 -->
    <state name="displayReMoveShadowAndPreReMoveAction" class="DisplayMoveShadowAndPreMoveAction">
        <nextCondStates expr="selectRoleAgain" nextStates="standbyAction"/>
        <nextCondStates expr="selectReMovePoint" nextStates="moveAction"/>
    </state>
    
    <state name="reMoveAction" class="MoveAction" nextStates="standbyAction">
    </state>
    
    <end name="end"/>
    
</workflow>