/**
 * The Clican-Pluto software suit is Copyright 2009, Clican Company
 * and individual contributors, and is licensed under the GNU LGPL.
 *
 * @author clican
 *
 */
 package com.clican.pluto.orm.model.dynamic;
 
import java.util.Calendar;
import java.util.Date;
import java.util.Set;
import java.util.List;

import javax.persistence.*;

import org.hibernate.annotations.Type;

import com.clican.pluto.orm.annotation.DynamicModel;
import com.clican.pluto.orm.annotation.DynamicProperty;
import com.clican.pluto.orm.annotation.DynamicClass;
import com.clican.pluto.orm.annotation.DynamicTemplateModelRelationSet;

import com.clican.pluto.orm.dynamic.inter.IDataModel;
import com.clican.pluto.orm.dynamic.inter.IDirectory;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

@DynamicClass
@DynamicModel(name = "${modelDescription.name}")
@Entity(name="$modelDescription.firstCharUpperName")
@Table(name = "${modelDescription.name.toUpperCase()}")
public class $modelDescription.firstCharUpperName implements IDataModel {

	private static final long serialVersionUID = 1L;
	
	private Long id;
	
	private IDirectory parent;
	
	private Set<Template${modelDescription.firstCharUpperName}Relation> template${modelDescription.firstCharUpperName}RelationSet;
	
	private Calendar createTime;
	
	private Calendar updateTime;
	
	#foreach( $field in $modelDescription.propertyDescriptionList )
	private $field.type.declareString $field.name; 
	#end
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "ID")
	public Long getId(){
		return id;
	}
	
	public void setId(Long id){
		this.id = id;
	}
	
	@ManyToOne(fetch = FetchType.EAGER, targetEntity = Directory.class)
	@JoinColumn(name = "DIRECTORY_ID", nullable = false)
	public IDirectory getParent(){
		return parent;
	}
	
	public void setParent(IDirectory parent){
		this.parent = parent;
	}
	
	@OneToMany(mappedBy = "dataModel", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@DynamicTemplateModelRelationSet
	public Set<Template${modelDescription.firstCharUpperName}Relation> getTemplate${modelDescription.firstCharUpperName}RelationSet(){
		return template${modelDescription.firstCharUpperName}RelationSet;
	}
	
	public void setTemplate${modelDescription.firstCharUpperName}RelationSet(Set<Template${modelDescription.firstCharUpperName}Relation> template${modelDescription.firstCharUpperName}RelationSet){
		this.template${modelDescription.firstCharUpperName}RelationSet = template${modelDescription.firstCharUpperName}RelationSet;
	}
	
	@Column(name = "CREATE_TIME")
	public Calendar getCreateTime(){
		return createTime;
	}
	
	public void setCreateTime(Calendar createTime){
		this.createTime = createTime;
	}
	
	@Column(name = "UPDATE_TIME")
	public Calendar getUpdateTime(){
		return updateTime;
	}
	
	public void setUpdateTime(Calendar updateTime){
		this.updateTime = updateTime;
	}
	
	#foreach( $field in $modelDescription.propertyDescriptionList )
	
	@DynamicProperty(name = "$field.name", control="$field.control.codecProperty()", type="$field.type.codecProperty()")
	#if( $field.control.supportMutil )
	#if ( $field.control.dynamic )
	@ManyToMany(cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	@JoinTable(name = "${modelDescription.name.toUpperCase()}_${field.name.toUpperCase()}_RELATION", inverseJoinColumns= @JoinColumn(name = "${field.type.customType.name.toUpperCase()}_ID", referencedColumnName = "ID"),joinColumns = @JoinColumn(name = "${modelDescription.name.toUpperCase()}_ID", referencedColumnName = "ID"))
	#end
	#if ( !$field.control.dynamic )
	@Type(type="com.clican.pluto.orm.usertype.StringSplitType")
	@Column(name= "$field.name.toUpperCase()")
	#end
	#end
	#if( !$field.control.supportMutil )
	#if ( $field.control.dynamic )
	@ManyToOne
	@JoinColumn(name = "$field.name.toUpperCase()", nullable = false)
	#end
	#if ( !$field.control.dynamic )
	@Column(name= "$field.name.toUpperCase()")
	#end
	#end
	public $field.type.declareString get${field.firstCharUpperName}(){
		return ${field.firstCharLowerName};
	}
	
	public void set${field.firstCharUpperName}($field.type.declareString ${field.firstCharLowerName}){
		this.${field.firstCharLowerName} = ${field.firstCharLowerName};
	}
	#end
	
	
	public String toString() {
		ToStringBuilder builder = new ToStringBuilder(this);
		#foreach( $field in $modelDescription.propertyDescriptionList )
		builder.append("${field.name}", this.${field.name});
		#end
		return builder.toString();
	}
	
	public int hashCode() {
		HashCodeBuilder builder = new HashCodeBuilder();
		builder.append(this.id);
		builder.append(this.name);
		builder.append(this.parent);
		return builder.toHashCode();
	}
	
	public boolean equals(Object object) {
		if (!(object instanceof $modelDescription.firstCharUpperName)) {
			return false;
		}
		$modelDescription.firstCharUpperName rhs = ($modelDescription.firstCharUpperName) object;
		EqualsBuilder builder = new EqualsBuilder();
		builder.append(this.id, rhs.getId());
		builder.append(this.name, rhs.getName());
		builder.append(this.parent, rhs.getParent());
		return builder.isEquals();
	}
	
}