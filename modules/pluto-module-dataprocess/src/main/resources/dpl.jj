options{
    STATIC=false ;
    IGNORE_CASE=true ;
}

PARSER_BEGIN(PlSql)
package com.clican.pluto.dataprocess.dpl.parser.javacc;

import java.io.ByteArrayInputStream;
import java.io.InputStream;
import java.io.Reader;
import java.util.HashSet;
import java.util.Set;
import java.util.List;
import java.util.ArrayList;

import com.clican.pluto.dataprocess.dpl.function.impl.Plus;
import com.clican.pluto.dataprocess.dpl.function.impl.Divide;
import com.clican.pluto.dataprocess.dpl.function.impl.Minus;
import com.clican.pluto.dataprocess.dpl.function.impl.Multi;
import com.clican.pluto.dataprocess.dpl.parser.bean.Column;
import com.clican.pluto.dataprocess.dpl.parser.object.From;
import com.clican.pluto.dataprocess.dpl.parser.object.Function;
import com.clican.pluto.dataprocess.dpl.parser.object.filter.Filter;
import com.clican.pluto.dataprocess.dpl.parser.object.filter.AndFilter;
import com.clican.pluto.dataprocess.dpl.parser.object.filter.OrFilter;
import com.clican.pluto.dataprocess.dpl.parser.object.filter.CompareFilter;
import com.clican.pluto.dataprocess.exception.DplParseException;
import com.clican.pluto.dataprocess.dpl.parser.bean.PrefixAndSuffix;
import com.clican.pluto.dataprocess.dpl.parser.eunmeration.CompareType;


class PlSql {

    /** Parse PL/SQL from files.  Each arg is expected to be the name of a file,
        or "-" to indicate System.in.
     */
    public static void main( String args[] ) throws Throwable {
        String dpl = "select aList.id,toChar(aList.date) as date from aList where (aList.id=1 and aList.name='aaa') or (aList.id=2 and aList.name='bbb')";
		InputStream is = new ByteArrayInputStream(dpl.getBytes());
		final PlSql parser = new PlSql(is);
		parser.from.getVariableNames().add("aList");
		parser.parse();
    }

    public Set<String> functions = new HashSet<String>();
    public Set<String> procedures = new HashSet<String>();
    public Set<String> tables = new HashSet<String>();
    public List<Object> columns = new ArrayList<Object>();
    public From from = new From(new ArrayList<String>());
    public Filter filter;

}
PARSER_END(PlSql)


SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
}


TOKEN: /* SQL and PLSQL Keywords. prefixed with K_ to avoid name clashes */
{
    <K_AND: "AND">
|   <K_AS: "AS">
|   <K_ASC:"ASC">
|   <K_DESC:"DESC">
|   <K_EXISTS:"EXISTS">
|   <K_EXIT:"EXIT">
|   <K_FROM:"FROM">
|   <K_GROUP:"GROUP BY">
|   <K_HAVING:"HAVING">
|   <K_IN:"IN">
|   <K_NOT_IN:"NOT IN">
|   <K_IS:"IS">
|   <K_IS_NULL:"IS NULL">
|   <K_IS_NOT_NULL:"IS NOT NULL">
|   <K_LIKE:"LIKE">
|   <K_NOT_LIKE:"NOT LIKE">
|   <K_OR:"OR">
|   <K_ORDER:"ORDER BY">
|   <K_REVERSE:"REVERSE">
|   <K_SELECT:"SELECT">
|   <K_WHERE:"WHERE">
|   <K_EQUAL:"=">
|   <K_NOT_EQUAL:"!=">
|   <K_LESS:"<">
|   <K_LESS_EQUAL:"<=">
|   <K_GREAT:">">
|   <K_GREAT_EQUAL:">=">
|   <K_LEFT_OUTER_JOIN:"+=">
|   <K_AFTER_NEAR:">~">
|   <K_BEFORE_NEAR:"<~">
|   <K_LEFT_BRACE:"(">
|   <K_RIGHT_BRACE:")">
}


TOKEN : /* Numeric Constants */
{
	< S_NUMBER: <FLOAT>
	    | <FLOAT> ( ["e","E"] ([ "-","+"])? <FLOAT> )?
    	>
  | 	< #FLOAT: <INTEGER>
	    | <INTEGER> ( "." <INTEGER> )?
	    | "." <INTEGER>
    	>
  | 	< #INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >
}

SPECIAL_TOKEN:
{
   <LINE_COMMENT: "--"(~["\r","\n"])*>
}


TOKEN:
{
    < S_IDENTIFIER: (<LETTER>)+ (<DIGIT> | <LETTER> |<SPECIAL_CHARS>)* >
  | < #LETTER: ["a"-"z", "A"-"Z"] >
  | < #SPECIAL_CHARS: "$" | "_" | "#">
  | < S_BIND: ":" ( <S_NUMBER> | <S_IDENTIFIER> ("." <S_IDENTIFIER>)?) >
  | < S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
  | < S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" >
}

void BindVariable():
{}
{
    <S_BIND>
  | ":" (<S_NUMBER> | <S_IDENTIFIER> ["." <S_IDENTIFIER>])
}

String SubQuery():
{}
{
    SelectStatement()
    {return "";}
}

void parse():
{}
{ 	SelectStatement()
	FromClause()
	[ WhereClause() ]
}

void SelectStatement():
{}
{"SELECT" SelectList()}
void SelectList():
{}
{
    "*" | SelectItem() ("," SelectItem())*
}

String OracleObjectName():
{}
{
    <S_IDENTIFIER>        {return token.image;}
  | <S_QUOTED_IDENTIFIER> {String s = token.image; return s.substring(1, s.length() - 1);}
}


void SelectItem():
{String columnName=null;
Object column;}
{
    column=SQLSimpleExpression()
    [ [ "AS" ] columnName=OracleObjectName()]
    {
    	if(column instanceof Function)
    	{
    		((Function)column).setColumnName(columnName);
    		columns.add(column);
    	}else{
    		Column col = new Column();
    		col.setPrefixAndSuffix((PrefixAndSuffix)column);
    		col.setColumnName(columnName);
    		columns.add(col);
    	}
    }
}

void FromClause():
{}
{
    "FROM" TableReference() ( "," TableReference())*
}

void TableReference():
{String tableName=null;}
{
  tableName=TableName(){from.getVariableNames().add(tableName);}
  | "(" SubQuery() ")" ["AS" tableName=OracleObjectName(){from.getVariableNames().add(tableName);}]
}


PrefixAndSuffix SQLSimpleExpression():
{Function function=null;
List<Object> params = new ArrayList<Object>();
Object param;
}
{
    param=SQLMultiplicativeExpression(){params.add(param);} 
    (
    	(
    		"+"{
    			if(function!=null){
    				params.clear();
    				params.add(function);
    			}
    			function = new Plus();
    			try{
    				function.setParams(params,from,null);
    			}catch(Exception e){
    				throw new ParseException(e.getMessage());
    			}
    			
    		} 
    	| 	"-"{
    			if(function!=null){
    				params.clear();
    				params.add(function);
    			}
    			function = new Minus();
    			try{
    				function.setParams(params,from,null);
    			}catch(Exception e){
    				throw new ParseException(e.getMessage());
    			}
    		}
    	) 
    	param=SQLMultiplicativeExpression(){params.add(param);}
    )*
    
     {
     	if(function!=null){
     		return new PrefixAndSuffix(function);
     	}else{
     		PrefixAndSuffix pas;
     		if(param instanceof Function){
     			pas = new PrefixAndSuffix((Function)param);
     		}else{
     			try{
     				pas = new PrefixAndSuffix((String)param,null);
     			}catch(Exception e){
     				throw new ParseException(e.getMessage());
     			}
     			
     		}
     		return pas;
     	}
     }
}

Object SQLMultiplicativeExpression():
{Function function=null;
List<Object> params = new ArrayList<Object>();
Object param;
}
{
    param=SQLExponentExpression(){params.add(param);} 
    (
    		"*"{
    			if(function!=null){
    				params.clear();
    				params.add(function);
    			}
    			function = new Multi();
    			try{
    				function.setParams(params,from,null);
    			}catch(Exception e){
    				throw new ParseException(e.getMessage());
    			}
    		} 
    	| 	"/"{
    			if(function!=null){
    				params.clear();
    				params.add(function);
    			}
    			function = new Divide();
    			try{
    				function.setParams(params,from,null);
    			}catch(Exception e){
    				throw new ParseException(e.getMessage());
    			}
    		} 
    	param=SQLExponentExpression(){params.add(param);}
    )*
    {
    	if(function!=null){
    		return function;
    	}else{
    		return param;
    	}
    }
}


Object SQLExponentExpression():
{Object all="";
}
{
    all=SQLPrimaryExpression()
    {return all;}
}

Object SQLPrimaryExpression():
{Object expr=null;}
{
(
  	<S_NUMBER>
  | <S_CHAR_LITERAL>
  | "(" (LOOKAHEAD(3) SelectStatement() | expr=SQLSimpleExpression()) ")"
  | BindVariable()
  | LOOKAHEAD(FunctionReference() "(") expr=FunctionCall()
  | expr=TableColumn() // Might be a call to a parameter-less function.
)
  
  {if(expr!=null){return expr;}else{return token.image;}}
}

String FunctionReference():
{
    String name;
}
{
    name = ObjectReference()
    {functions.add(name.toUpperCase());}
    {return name;}
}


Function FunctionCall():
{String functionName="";
Function function = null;
List<Object> params = new ArrayList<Object>();
}
{
    functionName=FunctionReference(){
    	Class<?> clazz=null;
    	try {
			clazz = Class.forName("com.clican.pluto.dataprocess.dpl.function.impl." + functionName.substring(0,1).toUpperCase()+functionName.substring(1));
			function = (Function) clazz.newInstance();
		} catch (Exception e) {
					
		}
    } 
    (
      "(" [params=FunctionArgumentList()] ")"
    )
    {
    try{
    				function.setParams(params,null);
    			}catch(Exception e){
    				throw new ParseException(e.getMessage());
    			}
    return function;
    }
}

List<Object> FunctionArgumentList():
{List<Object> params = new ArrayList<Object>();
Object param;}
{
    param=FunctionArgument(){params.add(param);} ("," param=FunctionArgument(){params.add(param);})*
    {return params;}
}

Object FunctionArgument():
{Object param;}
{
(  LOOKAHEAD(2) param=OracleObjectName()".*" // table.*
   | LOOKAHEAD(4) param=OracleObjectName()"." OracleObjectName() ".*" // schema.table.*
   | param=SQLSimpleExpression() // column name or expression
  ) 
   {return param;}
}

void WhereClause():
{}
{
    <K_WHERE> filter=FilterExpression()
}


Filter FilterExpression():
{List<Filter> filterList = new ArrayList<Filter>();
Filter filter = null;}
{
    filter=FilterAndExpression(){filterList.add(filter);} ("OR" filter=FilterAndExpression(){filterList.add(filter);})*
     {
    	Filter previousFilter = filterList.get(0);
    	for(int i=1;i<filterList.size();i++){
    		previousFilter = new OrFilter(previousFilter,filterList.get(i));
    	}
    	return previousFilter;
    }
}

Filter FilterAndExpression():
{List<Filter> filterList = new ArrayList<Filter>();
Filter filter = null;}
{
    filter=FilterBraceExpression(){filterList.add(filter);} ( "AND" filter=FilterBraceExpression(){filterList.add(filter);})*
    {
    	Filter previousFilter = filterList.get(0);
    	for(int i=1;i<filterList.size();i++){
    		previousFilter = new AndFilter(previousFilter,filterList.get(i));
    	}
    	return previousFilter;
    }
}

Filter FilterBraceExpression():
{Filter filter = null;}
{
	(
	LOOKAHEAD(<K_AND> | <K_OR> | <K_WHERE> | <K_LEFT_BRACE>) <K_LEFT_BRACE> filter=FilterExpression() <K_RIGHT_BRACE>
	|filter=CompareExpression()
	)
	{return filter;}
}


CompareFilter CompareExpression():
{
PrefixAndSuffix left=null;
PrefixAndSuffix right=null;
CompareType compareType = null;
CompareFilter filter = null;
}
{
    /* Only after looking past "(", Expression() and "," we will know that
       it is expression list */

    left=SQLSimpleExpression()
	
	compareType=OperatorExpression()
	
   (right=SQLSimpleExpression())?
   {filter=new CompareFilter(left,right,null,null,compareType,null);
    return filter;
   }
}

CompareType OperatorExpression():
{String operation=null;}
{

   (  
    <K_LEFT_OUTER_JOIN>
  | <K_NOT_EQUAL>
  | <K_GREAT_EQUAL>
  | <K_AFTER_NEAR>
  | <K_GREAT>
  | <K_LESS_EQUAL>
  | <K_BEFORE_NEAR>
  | <K_LESS>
  | <K_NOT_IN>
  | <K_IN>
  | <K_IS_NOT_NULL>
  | <K_IS_NULL>
  | <K_NOT_LIKE>
  | <K_LIKE>
  | <K_EQUAL>
  )

    {
    	operation=token.image;;
    	for(CompareType compareType : CompareType.values()) {
    		if(operation.contains(compareType.getOperation())) {
    			return compareType;
    		}
    	}
    	return null;
    }
}



String TableColumn():
{String expr;}
{
   expr=ObjectReference()
   {return expr;}
}

String TableName():
{
    String s;
}
{
    s=OracleObjectName() 
    {return s;}
}

String ObjectReference():
{
    String s;
    StringBuilder name = new StringBuilder();
}
{
    s=OracleObjectName()       {name.append(s);}
    [ "." s=OracleObjectName() {name.append(".").append(s);}
    [ "." s=OracleObjectName() {name.append(".").append(s);}
    ]]
    {return name.toString();}
}