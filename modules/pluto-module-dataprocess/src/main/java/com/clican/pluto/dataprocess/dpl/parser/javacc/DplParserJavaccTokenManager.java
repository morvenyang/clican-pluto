/* Generated By:JavaCC: Do not edit this line. DplParserJavaccTokenManager.java */
package com.clican.pluto.dataprocess.dpl.parser.javacc;

/** Token Manager. */
public class DplParserJavaccTokenManager implements DplParserJavaccConstants {

	/** Debug output. */
	public java.io.PrintStream debugStream = System.out;

	/** Set debug output. */
	public void setDebugStream(java.io.PrintStream ds) {
		debugStream = ds;
	}

	private final int jjStopStringLiteralDfa_0(int pos, long active0) {
		switch (pos) {
		case 0:
			if ((active0 & 0x40000000000000L) != 0L)
				return 0;
			if ((active0 & 0x208000000000000L) != 0L)
				return 61;
			if ((active0 & 0xfffffe0L) != 0L) {
				jjmatchedKind = 44;
				return 62;
			}
			if ((active0 & 0x4000000000000L) != 0L)
				return 11;
			return -1;
		case 1:
			if ((active0 & 0x19f40c0L) != 0L)
				return 62;
			if ((active0 & 0xe60bf20L) != 0L) {
				if (jjmatchedPos != 1) {
					jjmatchedKind = 44;
					jjmatchedPos = 1;
				}
				return 62;
			}
			return -1;
		case 2:
			if ((active0 & 0xf60bf00L) != 0L) {
				jjmatchedKind = 44;
				jjmatchedPos = 2;
				return 62;
			}
			if ((active0 & 0xa0L) != 0L)
				return 62;
			return -1;
		case 3:
			if ((active0 & 0x408000L) != 0L) {
				if (jjmatchedPos < 2) {
					jjmatchedKind = 44;
					jjmatchedPos = 2;
				}
				return -1;
			}
			if ((active0 & 0xf003200L) != 0L) {
				jjmatchedKind = 44;
				jjmatchedPos = 3;
				return 62;
			}
			if ((active0 & 0x200d00L) != 0L)
				return 62;
			return -1;
		case 4:
			if ((active0 & 0x408000L) != 0L) {
				if (jjmatchedPos < 2) {
					jjmatchedKind = 44;
					jjmatchedPos = 2;
				}
				return -1;
			}
			if ((active0 & 0x7003200L) != 0L) {
				jjmatchedKind = 44;
				jjmatchedPos = 4;
				return 62;
			}
			if ((active0 & 0x8000000L) != 0L)
				return 62;
			return -1;
		case 5:
			if ((active0 & 0x408000L) != 0L) {
				if (jjmatchedPos < 2) {
					jjmatchedKind = 44;
					jjmatchedPos = 2;
				}
				return -1;
			}
			if ((active0 & 0x1001000L) != 0L) {
				if (jjmatchedPos < 4) {
					jjmatchedKind = 44;
					jjmatchedPos = 4;
				}
				return -1;
			}
			if ((active0 & 0x2000000L) != 0L) {
				jjmatchedKind = 44;
				jjmatchedPos = 5;
				return 62;
			}
			if ((active0 & 0x4002200L) != 0L)
				return 62;
			return -1;
		case 6:
			if ((active0 & 0x400000L) != 0L) {
				if (jjmatchedPos < 2) {
					jjmatchedKind = 44;
					jjmatchedPos = 2;
				}
				return -1;
			}
			if ((active0 & 0x1001000L) != 0L) {
				if (jjmatchedPos < 4) {
					jjmatchedKind = 44;
					jjmatchedPos = 4;
				}
				return -1;
			}
			if ((active0 & 0x2000000L) != 0L)
				return 62;
			return -1;
		case 7:
			if ((active0 & 0x400000L) != 0L) {
				if (jjmatchedPos < 2) {
					jjmatchedKind = 44;
					jjmatchedPos = 2;
				}
				return -1;
			}
			if ((active0 & 0x1001000L) != 0L) {
				if (jjmatchedPos < 4) {
					jjmatchedKind = 44;
					jjmatchedPos = 4;
				}
				return -1;
			}
			return -1;
		default:
			return -1;
		}
	}

	private final int jjStartNfa_0(int pos, long active0) {
		return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
	}

	private int jjStopAtPos(int pos, int kind) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		return pos + 1;
	}

	private int jjMoveStringLiteralDfa0_0() {
		switch (curChar) {
		case 33:
			return jjMoveStringLiteralDfa1_0(0x20000000L);
		case 40:
			return jjStopAtPos(0, 37);
		case 41:
			return jjStopAtPos(0, 38);
		case 42:
			return jjStopAtPos(0, 55);
		case 43:
			jjmatchedKind = 53;
			return jjMoveStringLiteralDfa1_0(0x400000000L);
		case 44:
			return jjStopAtPos(0, 52);
		case 45:
			return jjStartNfaWithStates_0(0, 54, 0);
		case 46:
			jjmatchedKind = 51;
			return jjMoveStringLiteralDfa1_0(0x200000000000000L);
		case 47:
			return jjStopAtPos(0, 56);
		case 58:
			return jjStartNfaWithStates_0(0, 50, 11);
		case 60:
			jjmatchedKind = 30;
			return jjMoveStringLiteralDfa1_0(0x1080000000L);
		case 61:
			return jjStopAtPos(0, 28);
		case 62:
			jjmatchedKind = 32;
			return jjMoveStringLiteralDfa1_0(0xa00000000L);
		case 65:
		case 97:
			return jjMoveStringLiteralDfa1_0(0xe0L);
		case 68:
		case 100:
			return jjMoveStringLiteralDfa1_0(0x100L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa1_0(0x600L);
		case 70:
		case 102:
			return jjMoveStringLiteralDfa1_0(0x800L);
		case 71:
		case 103:
			return jjMoveStringLiteralDfa1_0(0x1000L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa1_0(0x2000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa1_0(0x1f4000L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa1_0(0x200000L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa1_0(0x408000L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa1_0(0x1800000L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa1_0(0x2000000L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa1_0(0x4000000L);
		case 87:
		case 119:
			return jjMoveStringLiteralDfa1_0(0x8000000L);
		default:
			return jjMoveNfa_0(2, 0);
		}
	}

	private int jjMoveStringLiteralDfa1_0(long active0) {
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(0, active0);
			return 1;
		}
		switch (curChar) {
		case 42:
			if ((active0 & 0x200000000000000L) != 0L)
				return jjStopAtPos(1, 57);
			break;
		case 61:
			if ((active0 & 0x20000000L) != 0L)
				return jjStopAtPos(1, 29);
			else if ((active0 & 0x80000000L) != 0L)
				return jjStopAtPos(1, 31);
			else if ((active0 & 0x200000000L) != 0L)
				return jjStopAtPos(1, 33);
			else if ((active0 & 0x400000000L) != 0L)
				return jjStopAtPos(1, 34);
			break;
		case 65:
		case 97:
			return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa2_0(active0, 0x6000100L);
		case 72:
		case 104:
			return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa2_0(active0, 0x200000L);
		case 78:
		case 110:
			if ((active0 & 0x4000L) != 0L)
				return jjStartNfaWithStates_0(1, 14, 62);
			return jjMoveStringLiteralDfa2_0(active0, 0x20L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa2_0(active0, 0x408000L);
		case 82:
		case 114:
			if ((active0 & 0x800000L) != 0L) {
				jjmatchedKind = 23;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x1001800L);
		case 83:
		case 115:
			if ((active0 & 0x40L) != 0L) {
				jjmatchedKind = 6;
				jjmatchedPos = 1;
			} else if ((active0 & 0x10000L) != 0L) {
				jjmatchedKind = 16;
				jjmatchedPos = 1;
			}
			return jjMoveStringLiteralDfa2_0(active0, 0x1e0080L);
		case 88:
		case 120:
			return jjMoveStringLiteralDfa2_0(active0, 0x600L);
		case 126:
			if ((active0 & 0x800000000L) != 0L)
				return jjStopAtPos(1, 35);
			else if ((active0 & 0x1000000000L) != 0L)
				return jjStopAtPos(1, 36);
			break;
		default:
			break;
		}
		return jjStartNfa_0(0, active0);
	}

	private int jjMoveStringLiteralDfa2_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(0, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(1, active0);
			return 2;
		}
		switch (curChar) {
		case 32:
			return jjMoveStringLiteralDfa3_0(active0, 0x1e0000L);
		case 67:
		case 99:
			if ((active0 & 0x80L) != 0L)
				return jjStartNfaWithStates_0(2, 7, 62);
			break;
		case 68:
		case 100:
			if ((active0 & 0x20L) != 0L)
				return jjStartNfaWithStates_0(2, 5, 62);
			return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
		case 69:
		case 101:
			return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa3_0(active0, 0x600L);
		case 75:
		case 107:
			return jjMoveStringLiteralDfa3_0(active0, 0x200000L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa3_0(active0, 0x4000000L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa3_0(active0, 0x1800L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa3_0(active0, 0x100L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa3_0(active0, 0x408000L);
		case 86:
		case 118:
			return jjMoveStringLiteralDfa3_0(active0, 0x2002000L);
		default:
			break;
		}
		return jjStartNfa_0(1, active0);
	}

	private int jjMoveStringLiteralDfa3_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(1, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(2, active0);
			return 3;
		}
		switch (curChar) {
		case 32:
			return jjMoveStringLiteralDfa4_0(active0, 0x408000L);
		case 67:
		case 99:
			if ((active0 & 0x100L) != 0L)
				return jjStartNfaWithStates_0(3, 8, 62);
			break;
		case 69:
		case 101:
			if ((active0 & 0x200000L) != 0L)
				return jjStartNfaWithStates_0(3, 21, 62);
			return jjMoveStringLiteralDfa4_0(active0, 0x7080000L);
		case 73:
		case 105:
			return jjMoveStringLiteralDfa4_0(active0, 0x2000L);
		case 77:
		case 109:
			if ((active0 & 0x800L) != 0L)
				return jjStartNfaWithStates_0(3, 11, 62);
			break;
		case 78:
		case 110:
			return jjMoveStringLiteralDfa4_0(active0, 0x160000L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa4_0(active0, 0x8000000L);
		case 83:
		case 115:
			return jjMoveStringLiteralDfa4_0(active0, 0x200L);
		case 84:
		case 116:
			if ((active0 & 0x400L) != 0L)
				return jjStartNfaWithStates_0(3, 10, 62);
			break;
		case 85:
		case 117:
			return jjMoveStringLiteralDfa4_0(active0, 0x1000L);
		default:
			break;
		}
		return jjStartNfa_0(2, active0);
	}

	private int jjMoveStringLiteralDfa4_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(2, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(3, active0);
			return 4;
		}
		switch (curChar) {
		case 67:
		case 99:
			return jjMoveStringLiteralDfa5_0(active0, 0x4000000L);
		case 69:
		case 101:
			if ((active0 & 0x8000000L) != 0L)
				return jjStartNfaWithStates_0(4, 27, 62);
			break;
		case 73:
		case 105:
			return jjMoveStringLiteralDfa5_0(active0, 0x8000L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa5_0(active0, 0x400000L);
		case 77:
		case 109:
			return jjMoveStringLiteralDfa5_0(active0, 0x80000L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa5_0(active0, 0x2000L);
		case 79:
		case 111:
			return jjMoveStringLiteralDfa5_0(active0, 0x140000L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa5_0(active0, 0x1000L);
		case 82:
		case 114:
			return jjMoveStringLiteralDfa5_0(active0, 0x3000000L);
		case 84:
		case 116:
			return jjMoveStringLiteralDfa5_0(active0, 0x200L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa5_0(active0, 0x20000L);
		default:
			break;
		}
		return jjStartNfa_0(3, active0);
	}

	private int jjMoveStringLiteralDfa5_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(3, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(4, active0);
			return 5;
		}
		switch (curChar) {
		case 32:
			return jjMoveStringLiteralDfa6_0(active0, 0x1001000L);
		case 71:
		case 103:
			if ((active0 & 0x2000L) != 0L)
				return jjStartNfaWithStates_0(5, 13, 62);
			break;
		case 73:
		case 105:
			return jjMoveStringLiteralDfa6_0(active0, 0x400000L);
		case 76:
		case 108:
			return jjMoveStringLiteralDfa6_0(active0, 0x20000L);
		case 78:
		case 110:
			if ((active0 & 0x8000L) != 0L)
				return jjStopAtPos(5, 15);
			break;
		case 80:
		case 112:
			return jjMoveStringLiteralDfa6_0(active0, 0x80000L);
		case 83:
		case 115:
			if ((active0 & 0x200L) != 0L)
				return jjStartNfaWithStates_0(5, 9, 62);
			return jjMoveStringLiteralDfa6_0(active0, 0x2000000L);
		case 84:
		case 116:
			if ((active0 & 0x4000000L) != 0L)
				return jjStartNfaWithStates_0(5, 26, 62);
			return jjMoveStringLiteralDfa6_0(active0, 0x140000L);
		default:
			break;
		}
		return jjStartNfa_0(4, active0);
	}

	private int jjMoveStringLiteralDfa6_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(4, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(5, active0);
			return 6;
		}
		switch (curChar) {
		case 32:
			return jjMoveStringLiteralDfa7_0(active0, 0x140000L);
		case 66:
		case 98:
			return jjMoveStringLiteralDfa7_0(active0, 0x1001000L);
		case 69:
		case 101:
			if ((active0 & 0x2000000L) != 0L)
				return jjStartNfaWithStates_0(6, 25, 62);
			break;
		case 75:
		case 107:
			return jjMoveStringLiteralDfa7_0(active0, 0x400000L);
		case 76:
		case 108:
			if ((active0 & 0x20000L) != 0L)
				return jjStopAtPos(6, 17);
			break;
		case 84:
		case 116:
			return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
		default:
			break;
		}
		return jjStartNfa_0(5, active0);
	}

	private int jjMoveStringLiteralDfa7_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(5, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(6, active0);
			return 7;
		}
		switch (curChar) {
		case 69:
		case 101:
			if ((active0 & 0x400000L) != 0L)
				return jjStopAtPos(7, 22);
			return jjMoveStringLiteralDfa8_0(active0, 0x100000L);
		case 78:
		case 110:
			return jjMoveStringLiteralDfa8_0(active0, 0x40000L);
		case 89:
		case 121:
			if ((active0 & 0x1000L) != 0L)
				return jjStopAtPos(7, 12);
			else if ((active0 & 0x80000L) != 0L)
				return jjStopAtPos(7, 19);
			else if ((active0 & 0x1000000L) != 0L)
				return jjStopAtPos(7, 24);
			break;
		default:
			break;
		}
		return jjStartNfa_0(6, active0);
	}

	private int jjMoveStringLiteralDfa8_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(6, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(7, active0);
			return 8;
		}
		switch (curChar) {
		case 77:
		case 109:
			return jjMoveStringLiteralDfa9_0(active0, 0x100000L);
		case 85:
		case 117:
			return jjMoveStringLiteralDfa9_0(active0, 0x40000L);
		default:
			break;
		}
		return jjStartNfa_0(7, active0);
	}

	private int jjMoveStringLiteralDfa9_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(7, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(8, active0);
			return 9;
		}
		switch (curChar) {
		case 76:
		case 108:
			return jjMoveStringLiteralDfa10_0(active0, 0x40000L);
		case 80:
		case 112:
			return jjMoveStringLiteralDfa10_0(active0, 0x100000L);
		default:
			break;
		}
		return jjStartNfa_0(8, active0);
	}

	private int jjMoveStringLiteralDfa10_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(8, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(9, active0);
			return 10;
		}
		switch (curChar) {
		case 76:
		case 108:
			if ((active0 & 0x40000L) != 0L)
				return jjStopAtPos(10, 18);
			break;
		case 84:
		case 116:
			return jjMoveStringLiteralDfa11_0(active0, 0x100000L);
		default:
			break;
		}
		return jjStartNfa_0(9, active0);
	}

	private int jjMoveStringLiteralDfa11_0(long old0, long active0) {
		if (((active0 &= old0)) == 0L)
			return jjStartNfa_0(9, old0);
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			jjStopStringLiteralDfa_0(10, active0);
			return 11;
		}
		switch (curChar) {
		case 89:
		case 121:
			if ((active0 & 0x100000L) != 0L)
				return jjStopAtPos(11, 20);
			break;
		default:
			break;
		}
		return jjStartNfa_0(10, active0);
	}

	private int jjStartNfaWithStates_0(int pos, int kind, int state) {
		jjmatchedKind = kind;
		jjmatchedPos = pos;
		try {
			curChar = input_stream.readChar();
		} catch (java.io.IOException e) {
			return pos + 1;
		}
		return jjMoveNfa_0(state, pos + 1);
	}

	static final long[] jjbitVec0 = { 0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL };
	static final long[] jjbitVec2 = { 0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL };

	private int jjMoveNfa_0(int startState, int curPos) {
		int startsAt = 0;
		jjnewStateCnt = 61;
		int i = 1;
		jjstateSet[0] = startState;
		int kind = 0x7fffffff;
		for (;;) {
			if (++jjround == 0x7fffffff)
				ReInitRounds();
			if (curChar < 64) {
				long l = 1L << curChar;
				do {
					switch (jjstateSet[--i]) {
					case 11:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 47)
								kind = 47;
							jjCheckNAddStates(0, 6);
						} else if (curChar == 46)
							jjCheckNAddTwoStates(30, 31);
						break;
					case 2:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 39)
								kind = 39;
							jjCheckNAddStates(7, 13);
						} else if (curChar == 46)
							jjCheckNAddTwoStates(41, 51);
						else if (curChar == 34)
							jjCheckNAddTwoStates(38, 39);
						else if (curChar == 39)
							jjCheckNAddTwoStates(33, 34);
						else if (curChar == 58)
							jjAddStates(14, 16);
						else if (curChar == 45)
							jjstateSet[jjnewStateCnt++] = 0;
						break;
					case 62:
					case 4:
						if ((0x3ff001800000000L & l) == 0L)
							break;
						if (kind > 44)
							kind = 44;
						jjCheckNAdd(4);
						break;
					case 61:
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 39)
								kind = 39;
							jjCheckNAdd(51);
						}
						if ((0x3ff000000000000L & l) != 0L) {
							if (kind > 39)
								kind = 39;
							jjCheckNAddTwoStates(41, 42);
						}
						break;
					case 0:
						if (curChar != 45)
							break;
						if (kind > 43)
							kind = 43;
						jjCheckNAdd(1);
						break;
					case 1:
						if ((0xffffffffffffdbffL & l) == 0L)
							break;
						if (kind > 43)
							kind = 43;
						jjCheckNAdd(1);
						break;
					case 5:
						if (curChar == 58)
							jjAddStates(14, 16);
						break;
					case 7:
						if ((0x3ff001800000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjAddStates(17, 18);
						break;
					case 8:
						if (curChar == 46)
							jjstateSet[jjnewStateCnt++] = 9;
						break;
					case 10:
						if ((0x3ff001800000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjstateSet[jjnewStateCnt++] = 10;
						break;
					case 12:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAdd(12);
						break;
					case 13:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAddTwoStates(13, 14);
						break;
					case 14:
						if (curChar == 46)
							jjCheckNAdd(15);
						break;
					case 15:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAdd(15);
						break;
					case 16:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAddTwoStates(16, 17);
						break;
					case 18:
						if ((0x280000000000L & l) != 0L)
							jjAddStates(19, 20);
						break;
					case 19:
						if (curChar == 46)
							jjCheckNAdd(20);
						break;
					case 20:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAdd(20);
						break;
					case 21:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAddStates(21, 23);
						break;
					case 22:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAdd(22);
						break;
					case 23:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAddTwoStates(23, 24);
						break;
					case 24:
						if (curChar == 46)
							jjCheckNAdd(25);
						break;
					case 25:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAdd(25);
						break;
					case 26:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAddStates(24, 26);
						break;
					case 27:
						if (curChar == 46)
							jjCheckNAdd(28);
						break;
					case 28:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAddTwoStates(28, 17);
						break;
					case 29:
						if (curChar == 46)
							jjCheckNAddTwoStates(30, 31);
						break;
					case 30:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAdd(30);
						break;
					case 31:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAddTwoStates(31, 17);
						break;
					case 32:
						if (curChar == 39)
							jjCheckNAddTwoStates(33, 34);
						break;
					case 33:
						if ((0xffffff7fffffffffL & l) != 0L)
							jjCheckNAddTwoStates(33, 34);
						break;
					case 34:
						if (curChar != 39)
							break;
						if (kind > 48)
							kind = 48;
						jjstateSet[jjnewStateCnt++] = 35;
						break;
					case 35:
						if (curChar == 39)
							jjCheckNAddTwoStates(36, 34);
						break;
					case 36:
						if ((0xffffff7fffffffffL & l) != 0L)
							jjCheckNAddTwoStates(36, 34);
						break;
					case 37:
						if (curChar == 34)
							jjCheckNAddTwoStates(38, 39);
						break;
					case 38:
						if ((0xfffffffbffffdbffL & l) != 0L)
							jjCheckNAddTwoStates(38, 39);
						break;
					case 39:
						if (curChar == 34 && kind > 49)
							kind = 49;
						break;
					case 40:
						if (curChar == 46)
							jjCheckNAddTwoStates(41, 51);
						break;
					case 41:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAddTwoStates(41, 42);
						break;
					case 43:
						if ((0x280000000000L & l) != 0L)
							jjAddStates(27, 28);
						break;
					case 44:
						if (curChar == 46)
							jjCheckNAdd(45);
						break;
					case 45:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAdd(45);
						break;
					case 46:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAddStates(29, 31);
						break;
					case 47:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAdd(47);
						break;
					case 48:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAddTwoStates(48, 49);
						break;
					case 49:
						if (curChar == 46)
							jjCheckNAdd(50);
						break;
					case 50:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAdd(50);
						break;
					case 51:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAdd(51);
						break;
					case 52:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAddStates(7, 13);
						break;
					case 53:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAddTwoStates(53, 42);
						break;
					case 54:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAddStates(32, 34);
						break;
					case 55:
						if (curChar == 46)
							jjCheckNAdd(56);
						break;
					case 56:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAddTwoStates(56, 42);
						break;
					case 57:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAddTwoStates(57, 58);
						break;
					case 58:
						if (curChar == 46)
							jjCheckNAdd(59);
						break;
					case 59:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAdd(59);
						break;
					case 60:
						if ((0x3ff000000000000L & l) == 0L)
							break;
						if (kind > 39)
							kind = 39;
						jjCheckNAdd(60);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else if (curChar < 128) {
				long l = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 11:
					case 6:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAddStates(35, 37);
						break;
					case 2:
					case 3:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 44)
							kind = 44;
						jjCheckNAddTwoStates(3, 4);
						break;
					case 62:
						if ((0x7fffffe87fffffeL & l) != 0L) {
							if (kind > 44)
								kind = 44;
							jjCheckNAdd(4);
						}
						if ((0x7fffffe07fffffeL & l) != 0L) {
							if (kind > 44)
								kind = 44;
							jjCheckNAddTwoStates(3, 4);
						}
						break;
					case 1:
						if (kind > 43)
							kind = 43;
						jjstateSet[jjnewStateCnt++] = 1;
						break;
					case 4:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 44)
							kind = 44;
						jjCheckNAdd(4);
						break;
					case 7:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAddTwoStates(7, 8);
						break;
					case 9:
						if ((0x7fffffe07fffffeL & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAddTwoStates(9, 10);
						break;
					case 10:
						if ((0x7fffffe87fffffeL & l) == 0L)
							break;
						if (kind > 47)
							kind = 47;
						jjCheckNAdd(10);
						break;
					case 17:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(38, 40);
						break;
					case 33:
						jjCheckNAddTwoStates(33, 34);
						break;
					case 36:
						jjCheckNAddTwoStates(36, 34);
						break;
					case 38:
						jjAddStates(41, 42);
						break;
					case 42:
						if ((0x2000000020L & l) != 0L)
							jjAddStates(43, 45);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			} else {
				int hiByte = (int) (curChar >> 8);
				int i1 = hiByte >> 6;
				long l1 = 1L << (hiByte & 077);
				int i2 = (curChar & 0xff) >> 6;
				long l2 = 1L << (curChar & 077);
				do {
					switch (jjstateSet[--i]) {
					case 1:
						if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
							break;
						if (kind > 43)
							kind = 43;
						jjstateSet[jjnewStateCnt++] = 1;
						break;
					case 33:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjCheckNAddTwoStates(33, 34);
						break;
					case 36:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjCheckNAddTwoStates(36, 34);
						break;
					case 38:
						if (jjCanMove_0(hiByte, i1, i2, l1, l2))
							jjAddStates(41, 42);
						break;
					default:
						break;
					}
				} while (i != startsAt);
			}
			if (kind != 0x7fffffff) {
				jjmatchedKind = kind;
				jjmatchedPos = curPos;
				kind = 0x7fffffff;
			}
			++curPos;
			if ((i = jjnewStateCnt) == (startsAt = 61 - (jjnewStateCnt = startsAt)))
				return curPos;
			try {
				curChar = input_stream.readChar();
			} catch (java.io.IOException e) {
				return curPos;
			}
		}
	}

	static final int[] jjnextStates = { 12, 13, 14, 16, 26, 27, 17, 53, 54, 55, 42, 57, 58, 60, 6, 11, 29, 7, 8, 19, 21, 22, 23, 24, 26, 27, 17, 44, 46, 47,
			48, 49, 54, 55, 42, 6, 7, 8, 18, 19, 21, 38, 39, 43, 44, 46, };

	private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2) {
		switch (hiByte) {
		case 0:
			return ((jjbitVec2[i2] & l2) != 0L);
		default:
			if ((jjbitVec0[i1] & l1) != 0L)
				return true;
			return false;
		}
	}

	/** Token literal values. */
	public static final String[] jjstrLiteralImages = { "", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null,
			null, null, null, null, null, null, null, null, null, null, null, "\75", "\41\75", "\74", "\74\75", "\76", "\76\75", "\53\75", "\76\176",
			"\74\176", "\50", "\51", null, null, null, null, null, null, null, null, null, null, null, "\72", "\56", "\54", "\53", "\55", "\52", "\57",
			"\56\52", };

	/** Lexer state names. */
	public static final String[] lexStateNames = { "DEFAULT", };
	static final long[] jjtoToken = { 0x3ff90ffffffffe1L, };
	static final long[] jjtoSkip = { 0x8000000001eL, };
	static final long[] jjtoSpecial = { 0x80000000000L, };
	protected SimpleCharStream input_stream;
	private final int[] jjrounds = new int[61];
	private final int[] jjstateSet = new int[122];
	protected char curChar;

	/** Constructor. */
	public DplParserJavaccTokenManager(SimpleCharStream stream) {
		if (SimpleCharStream.staticFlag)
			throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
		input_stream = stream;
	}

	/** Constructor. */
	public DplParserJavaccTokenManager(SimpleCharStream stream, int lexState) {
		this(stream);
		SwitchTo(lexState);
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream) {
		jjmatchedPos = jjnewStateCnt = 0;
		curLexState = defaultLexState;
		input_stream = stream;
		ReInitRounds();
	}

	private void ReInitRounds() {
		int i;
		jjround = 0x80000001;
		for (i = 61; i-- > 0;)
			jjrounds[i] = 0x80000000;
	}

	/** Reinitialise parser. */
	public void ReInit(SimpleCharStream stream, int lexState) {
		ReInit(stream);
		SwitchTo(lexState);
	}

	/** Switch to specified lex state. */
	public void SwitchTo(int lexState) {
		if (lexState >= 1 || lexState < 0)
			throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
		else
			curLexState = lexState;
	}

	protected Token jjFillToken() {
		final Token t;
		final String curTokenImage;
		final int beginLine;
		final int endLine;
		final int beginColumn;
		final int endColumn;
		String im = jjstrLiteralImages[jjmatchedKind];
		curTokenImage = (im == null) ? input_stream.GetImage() : im;
		beginLine = input_stream.getBeginLine();
		beginColumn = input_stream.getBeginColumn();
		endLine = input_stream.getEndLine();
		endColumn = input_stream.getEndColumn();
		t = Token.newToken(jjmatchedKind, curTokenImage);

		t.beginLine = beginLine;
		t.endLine = endLine;
		t.beginColumn = beginColumn;
		t.endColumn = endColumn;

		return t;
	}

	int curLexState = 0;
	int defaultLexState = 0;
	int jjnewStateCnt;
	int jjround;
	int jjmatchedPos;
	int jjmatchedKind;

	/** Get the next Token. */
	public Token getNextToken() {
		Token specialToken = null;
		Token matchedToken;
		int curPos = 0;

		EOFLoop: for (;;) {
			try {
				curChar = input_stream.BeginToken();
			} catch (java.io.IOException e) {
				jjmatchedKind = 0;
				matchedToken = jjFillToken();
				matchedToken.specialToken = specialToken;
				return matchedToken;
			}

			try {
				input_stream.backup(0);
				while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
					curChar = input_stream.BeginToken();
			} catch (java.io.IOException e1) {
				continue EOFLoop;
			}
			jjmatchedKind = 0x7fffffff;
			jjmatchedPos = 0;
			curPos = jjMoveStringLiteralDfa0_0();
			if (jjmatchedKind != 0x7fffffff) {
				if (jjmatchedPos + 1 < curPos)
					input_stream.backup(curPos - jjmatchedPos - 1);
				if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
					matchedToken = jjFillToken();
					matchedToken.specialToken = specialToken;
					return matchedToken;
				} else {
					if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
						matchedToken = jjFillToken();
						if (specialToken == null)
							specialToken = matchedToken;
						else {
							matchedToken.specialToken = specialToken;
							specialToken = (specialToken.next = matchedToken);
						}
					}
					continue EOFLoop;
				}
			}
			int error_line = input_stream.getEndLine();
			int error_column = input_stream.getEndColumn();
			String error_after = null;
			boolean EOFSeen = false;
			try {
				input_stream.readChar();
				input_stream.backup(1);
			} catch (java.io.IOException e1) {
				EOFSeen = true;
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
				if (curChar == '\n' || curChar == '\r') {
					error_line++;
					error_column = 0;
				} else
					error_column++;
			}
			if (!EOFSeen) {
				input_stream.backup(1);
				error_after = curPos <= 1 ? "" : input_stream.GetImage();
			}
			throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
		}
	}

	private void jjCheckNAdd(int state) {
		if (jjrounds[state] != jjround) {
			jjstateSet[jjnewStateCnt++] = state;
			jjrounds[state] = jjround;
		}
	}

	private void jjAddStates(int start, int end) {
		do {
			jjstateSet[jjnewStateCnt++] = jjnextStates[start];
		} while (start++ != end);
	}

	private void jjCheckNAddTwoStates(int state1, int state2) {
		jjCheckNAdd(state1);
		jjCheckNAdd(state2);
	}

	private void jjCheckNAddStates(int start, int end) {
		do {
			jjCheckNAdd(jjnextStates[start]);
		} while (start++ != end);
	}

}
