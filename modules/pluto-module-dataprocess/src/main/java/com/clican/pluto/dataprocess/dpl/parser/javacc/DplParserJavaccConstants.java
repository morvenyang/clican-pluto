/* Generated By:JavaCC: Do not edit this line. DplParserJavaccConstants.java */
package com.clican.pluto.dataprocess.dpl.parser.javacc;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface DplParserJavaccConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int K_AND = 5;
  /** RegularExpression Id. */
  int K_AS = 6;
  /** RegularExpression Id. */
  int K_ASC = 7;
  /** RegularExpression Id. */
  int K_DESC = 8;
  /** RegularExpression Id. */
  int K_EXISTS = 9;
  /** RegularExpression Id. */
  int K_EXIT = 10;
  /** RegularExpression Id. */
  int K_FROM = 11;
  /** RegularExpression Id. */
  int K_GROUP = 12;
  /** RegularExpression Id. */
  int K_HAVING = 13;
  /** RegularExpression Id. */
  int K_IN = 14;
  /** RegularExpression Id. */
  int K_NOT_IN = 15;
  /** RegularExpression Id. */
  int K_IS = 16;
  /** RegularExpression Id. */
  int K_IS_NULL = 17;
  /** RegularExpression Id. */
  int K_IS_NOT_NULL = 18;
  /** RegularExpression Id. */
  int K_IS_EMPTY = 19;
  /** RegularExpression Id. */
  int K_IS_NOT_EMPTY = 20;
  /** RegularExpression Id. */
  int K_LIKE = 21;
  /** RegularExpression Id. */
  int K_NOT_LIKE = 22;
  /** RegularExpression Id. */
  int K_OR = 23;
  /** RegularExpression Id. */
  int K_ORDER = 24;
  /** RegularExpression Id. */
  int K_REVERSE = 25;
  /** RegularExpression Id. */
  int K_SELECT = 26;
  /** RegularExpression Id. */
  int K_WHERE = 27;
  /** RegularExpression Id. */
  int K_EQUAL = 28;
  /** RegularExpression Id. */
  int K_NOT_EQUAL = 29;
  /** RegularExpression Id. */
  int K_LESS = 30;
  /** RegularExpression Id. */
  int K_LESS_EQUAL = 31;
  /** RegularExpression Id. */
  int K_GREAT = 32;
  /** RegularExpression Id. */
  int K_GREAT_EQUAL = 33;
  /** RegularExpression Id. */
  int K_LEFT_OUTER_JOIN = 34;
  /** RegularExpression Id. */
  int K_AFTER_NEAR = 35;
  /** RegularExpression Id. */
  int K_BEFORE_NEAR = 36;
  /** RegularExpression Id. */
  int K_LEFT_BRACE = 37;
  /** RegularExpression Id. */
  int K_RIGHT_BRACE = 38;
  /** RegularExpression Id. */
  int S_NUMBER = 39;
  /** RegularExpression Id. */
  int FLOAT = 40;
  /** RegularExpression Id. */
  int INTEGER = 41;
  /** RegularExpression Id. */
  int DIGIT = 42;
  /** RegularExpression Id. */
  int LINE_COMMENT = 43;
  /** RegularExpression Id. */
  int S_IDENTIFIER = 44;
  /** RegularExpression Id. */
  int LETTER = 45;
  /** RegularExpression Id. */
  int SPECIAL_CHARS = 46;
  /** RegularExpression Id. */
  int S_BIND = 47;
  /** RegularExpression Id. */
  int S_CHAR_LITERAL = 48;
  /** RegularExpression Id. */
  int S_QUOTED_IDENTIFIER = 49;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"AND\"",
    "\"AS\"",
    "\"ASC\"",
    "\"DESC\"",
    "\"EXISTS\"",
    "\"EXIT\"",
    "\"FROM\"",
    "\"GROUP BY\"",
    "\"HAVING\"",
    "\"IN\"",
    "\"NOT IN\"",
    "\"IS\"",
    "\"IS NULL\"",
    "\"IS NOT NULL\"",
    "\"IS EMPTY\"",
    "\"IS NOT EMPTY\"",
    "\"LIKE\"",
    "\"NOT LIKE\"",
    "\"OR\"",
    "\"ORDER BY\"",
    "\"REVERSE\"",
    "\"SELECT\"",
    "\"WHERE\"",
    "\"=\"",
    "\"!=\"",
    "\"<\"",
    "\"<=\"",
    "\">\"",
    "\">=\"",
    "\"+=\"",
    "\">~\"",
    "\"<~\"",
    "\"(\"",
    "\")\"",
    "<S_NUMBER>",
    "<FLOAT>",
    "<INTEGER>",
    "<DIGIT>",
    "<LINE_COMMENT>",
    "<S_IDENTIFIER>",
    "<LETTER>",
    "<SPECIAL_CHARS>",
    "<S_BIND>",
    "<S_CHAR_LITERAL>",
    "<S_QUOTED_IDENTIFIER>",
    "\":\"",
    "\".\"",
    "\",\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\".*\"",
  };

}
