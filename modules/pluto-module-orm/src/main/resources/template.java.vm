/**
 * The Clican-Pluto software suit is Copyright 2009, Clican Company
 * and individual contributors, and is licensed under the GNU LGPL.
 *
 * @author clican
 *
 */
 package com.clican.pluto.orm.model.dynamic;
 
import java.util.Calendar;
import java.util.Set;

import javax.persistence.*;

import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

import com.clican.pluto.orm.annotation.DynamicClass;
import com.clican.pluto.orm.dynamic.inter.ITemplate;

import org.apache.commons.lang.builder.EqualsBuilder;
import org.apache.commons.lang.builder.HashCodeBuilder;
import org.apache.commons.lang.builder.ToStringBuilder;

import org.hibernate.annotations.Type;

@DynamicClass
@Entity(name="Template")
@Table(name = "TEMPLATE")
public class Template implements ITemplate {

	private static final long serialVersionUID = 1L;
	
	private Long id;
	
	private String name;
	
	private String content;
	
	private Calendar createTime;
	
	private Calendar updateTime;
	
	private String suffix;
	
	#foreach( $modelDescription in $modelDescriptionList )
	
	private Set<Template${modelDescription.firstCharUpperName}Relation> template${modelDescription.firstCharUpperName}RelationSet; 
	#end
	
	private Set<TemplateDirectoryRelation> templateDirectoryRelationSet;
	
	@Id
	@GeneratedValue(strategy = GenerationType.AUTO)
	@Column(name = "ID")
	public Long getId(){
		return id;
	}
	
	public void setId(Long id){
		this.id = id;
	}
	
	@Column(name = "NAME")
	public String getName(){
		return name;
	}
	
	public void setName(String name){
		this.name = name;
	}
	
	@Column(name = "CONTENT")
	@Type(type="org.springframework.orm.hibernate3.support.ClobStringType")
	public String getContent(){
		return content;
	}
	
	public void setContent(String content){
		this.content = content;
	}
	
	@Column(name = "CREATE_TIME")
	public Calendar getCreateTime(){
		return createTime;
	}
	
	public void setCreateTime(Calendar createTime){
		this.createTime = createTime;
	}
	
	@Column(name = "UPDATE_TIME")
	public Calendar getUpdateTime(){
		return updateTime;
	}
	
	public void setUpdateTime(Calendar updateTime){
		this.updateTime = updateTime;
	}
	
	
	@Column(name = "SUFFIX")
	public String getSuffix(){
		return suffix;
	}
	
	public void setSuffix(String suffix){
		this.suffix = suffix;
	}
	
	#foreach( $modelDescription in $modelDescriptionList )
	
	@OneToMany(mappedBy = "template", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	public Set<Template${modelDescription.firstCharUpperName}Relation> getTemplate${modelDescription.firstCharUpperName}RelationSet(){
		return template${modelDescription.firstCharUpperName}RelationSet;
	}
	
	public void setTemplate${modelDescription.firstCharUpperName}RelationSet(Set<Template${modelDescription.firstCharUpperName}Relation> template${modelDescription.firstCharUpperName}RelationSet){
		this.template${modelDescription.firstCharUpperName}RelationSet = template${modelDescription.firstCharUpperName}RelationSet;
	}
	#end
	
	@OneToMany(mappedBy = "template", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
	public Set<TemplateDirectoryRelation> getTemplateDirectoryRelationSet(){
		return templateDirectoryRelationSet;
	}
	
	public void setTemplateDirectoryRelationSet(Set<TemplateDirectoryRelation> templateDirectoryRelationSet){
		this.templateDirectoryRelationSet = templateDirectoryRelationSet;
	}
	
	public String toString() {
		ToStringBuilder builder = new ToStringBuilder(this);
		builder.append("id", this.id);
		return builder.toString();
	}
	
	public int hashCode() {
		HashCodeBuilder builder = new HashCodeBuilder();
		builder.append(this.id);
		builder.append(this.name);
		return builder.toHashCode();
	}
	
	public boolean equals(Object object) {
		if (!(object instanceof Template)) {
			return false;
		}
		Template rhs = (Template) object;
		EqualsBuilder builder = new EqualsBuilder();
		builder.append(id, rhs.getId());
		builder.append(name, rhs.getName());
		return builder.isEquals();
	}
}